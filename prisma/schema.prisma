generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?   @db.VarChar(255)
  role          role      @default(USER)
  email         String?   @unique @db.VarChar(255)
  emailVerified DateTime? @map("email_verified") @db.Timestamptz(6)
  image         String?
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  updated_at    DateTime  @default(now()) @db.Timestamptz(6)
  awards        awards[]  @relation("awardsTousers")

  @@map("users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime @db.Timestamptz(6)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  @@map("verification_requests")
}

model Event {
  id               Int           @id @default(autoincrement())
  name             String        @db.VarChar(255)
  location         String?       @db.VarChar(255)
  event_date       DateTime?     @db.Timestamp(6)
  num_performances Int           @default(0)
  judges           Json?         @db.Json
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  Performance      Performance[]

  @@map("events")
}

model School {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  contacts    Contact[]
  Performance Performance[]

  @@map("schools")
}

model Setting {
  id         Int         @id @default(autoincrement())
  type       settingtype
  value      String?     @db.VarChar(255)
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)

  @@map("settings")
}

model Performance {
  id                  Int                   @id @default(autoincrement())
  name                String?               @db.VarChar(255)
  academic_level      String?               @db.VarChar(255)
  performers          String[]              @db.VarChar(255)
  choreographers      String[]              @db.VarChar(255)
  competition_level   String?               @db.VarChar(255)
  dance_size          String?               @db.VarChar(255)
  dance_entry         Int
  dance_style         String?               @db.VarChar(255)
  dance_title         String?               @db.VarChar(255)
  event_id            Int
  school_id           Int
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  event               Event                 @relation(fields: [event_id], references: [id])
  school              School                @relation(fields: [school_id], references: [id])
  adjudications       Adjudication[]
  awards_performances awards_performances[] @relation("awards_performancesToperformances")

  @@map("performances")
}

model Adjudication {
  id              Int         @id @default(autoincrement())
  artistic_mark   Int
  technical_mark  Int
  cumulative_mark Int
  audio_url       String?     @db.VarChar(255)
  notes           String?
  performance_id  Int
  created_at      DateTime    @default(now()) @db.Timestamp(6)
  updated_at      DateTime    @default(now()) @db.Timestamp(6)
  performance     Performance @relation(fields: [performance_id], references: [id])

  @@map("adjudications")
}

model Contact {
  id         Int      @id @default(autoincrement())
  school_id  Int
  year       Int
  name       String   @db.VarChar(255)
  email      String   @db.VarChar(255)
  phone      String?  @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  school     School   @relation(fields: [school_id], references: [id])

  @@map("contacts")
}

model awards {
  id                  Int                   @id @default(autoincrement())
  title               String                @db.VarChar(255)
  is_finalized        String                @db.Bit(1)
  user_id             Int
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  users               User                  @relation("awardsTousers", fields: [user_id], references: [id])
  awards_performances awards_performances[]
}

model awards_performances {
  award_id       Int
  performance_id Int
  awards         awards      @relation(fields: [award_id], references: [id])
  performances   Performance @relation("awards_performancesToperformances", fields: [performance_id], references: [id])

  @@id([award_id, performance_id])
}

enum role {
  USER
  JUDGE
  ADMIN
}

enum settingtype {
  COMPETITION_LEVEL
  DANCE_SIZE
  STYLE
}
