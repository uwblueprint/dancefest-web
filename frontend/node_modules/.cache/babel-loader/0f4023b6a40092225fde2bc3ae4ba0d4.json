{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { counter, getId, getPrefix } from \"./context\"; // --------------------------------------------\n\nvar prefixId = function (id, prefix, name) {\n  var uid = prefix + id;\n  return String(name ? name(uid) : uid);\n};\n/**\n * @deprecated\n * UID in form of renderProps (not SSR friendly)\n * @see https://github.com/thearnica/react-uid#react-components\n * @example\n * // get UID to connect label to input\n * <UID>\n *   {(id)} => <label htmlFor={id}><input id={id}/>}\n * </UID>\n *\n * // get uid to generate uid for a keys in a list\n * <UID>\n *   {(, uid)} => items.map(item => <li key={uid(item) />)}\n * </UID>\n */\n\n\nvar UID =\n/** @class */\nfunction (_super) {\n  __extends(UID, _super);\n\n  function UID() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      quartz: _this.props.idSource || counter,\n      prefix: getPrefix(_this.props.idSource),\n      id: getId(_this.props.idSource || counter)\n    };\n\n    _this.uid = function (item) {\n      return prefixId(_this.state.id + '-' + _this.state.quartz.uid(item), _this.state.prefix, _this.props.name);\n    };\n\n    return _this;\n  }\n\n  UID.prototype.render = function () {\n    var _a = this.props,\n        children = _a.children,\n        name = _a.name;\n    var _b = this.state,\n        id = _b.id,\n        prefix = _b.prefix;\n    return children(prefixId(id, prefix, name), this.uid);\n  };\n\n  return UID;\n}(React.Component);\n\nexport { UID };","map":{"version":3,"sources":["/Users/oustan/Documents/PROJECTS/dancefest-web/frontend/node_modules/react-uid/dist/es2015/UIDComponent.js"],"names":["__extends","React","counter","getId","getPrefix","prefixId","id","prefix","name","uid","String","UID","_super","_this","apply","arguments","state","quartz","props","idSource","item","prototype","render","_a","children","_b","Component"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,EAAkBC,KAAlB,EAAyBC,SAAzB,QAA0C,WAA1C,C,CACA;;AACA,IAAIC,QAAQ,GAAG,UAAUC,EAAV,EAAcC,MAAd,EAAsBC,IAAtB,EAA4B;AACvC,MAAIC,GAAG,GAAIF,MAAM,GAAGD,EAApB;AACA,SAAOI,MAAM,CAACF,IAAI,GAAGA,IAAI,CAACC,GAAD,CAAP,GAAeA,GAApB,CAAb;AACH,CAHD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,GAAG;AAAG;AAAe,UAAUC,MAAV,EAAkB;AACvCZ,EAAAA,SAAS,CAACW,GAAD,EAAMC,MAAN,CAAT;;AACA,WAASD,GAAT,GAAe;AACX,QAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;;AACAF,IAAAA,KAAK,CAACG,KAAN,GAAc;AACVC,MAAAA,MAAM,EAAEJ,KAAK,CAACK,KAAN,CAAYC,QAAZ,IAAwBjB,OADtB;AAEVK,MAAAA,MAAM,EAAEH,SAAS,CAACS,KAAK,CAACK,KAAN,CAAYC,QAAb,CAFP;AAGVb,MAAAA,EAAE,EAAEH,KAAK,CAACU,KAAK,CAACK,KAAN,CAAYC,QAAZ,IAAwBjB,OAAzB;AAHC,KAAd;;AAKAW,IAAAA,KAAK,CAACJ,GAAN,GAAY,UAAUW,IAAV,EAAgB;AAAE,aAAOf,QAAQ,CAACQ,KAAK,CAACG,KAAN,CAAYV,EAAZ,GAAiB,GAAjB,GAAuBO,KAAK,CAACG,KAAN,CAAYC,MAAZ,CAAmBR,GAAnB,CAAuBW,IAAvB,CAAxB,EAAsDP,KAAK,CAACG,KAAN,CAAYT,MAAlE,EAA0EM,KAAK,CAACK,KAAN,CAAYV,IAAtF,CAAf;AAA6G,KAA3I;;AACA,WAAOK,KAAP;AACH;;AACDF,EAAAA,GAAG,CAACU,SAAJ,CAAcC,MAAd,GAAuB,YAAY;AAC/B,QAAIC,EAAE,GAAG,KAAKL,KAAd;AAAA,QAAqBM,QAAQ,GAAGD,EAAE,CAACC,QAAnC;AAAA,QAA6ChB,IAAI,GAAGe,EAAE,CAACf,IAAvD;AACA,QAAIiB,EAAE,GAAG,KAAKT,KAAd;AAAA,QAAqBV,EAAE,GAAGmB,EAAE,CAACnB,EAA7B;AAAA,QAAiCC,MAAM,GAAGkB,EAAE,CAAClB,MAA7C;AACA,WAAOiB,QAAQ,CAACnB,QAAQ,CAACC,EAAD,EAAKC,MAAL,EAAaC,IAAb,CAAT,EAA6B,KAAKC,GAAlC,CAAf;AACH,GAJD;;AAKA,SAAOE,GAAP;AACH,CAlBwB,CAkBvBV,KAAK,CAACyB,SAlBiB,CAAzB;;AAmBA,SAASf,GAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { counter, getId, getPrefix } from \"./context\";\n// --------------------------------------------\nvar prefixId = function (id, prefix, name) {\n    var uid = (prefix + id);\n    return String(name ? name(uid) : uid);\n};\n/**\n * @deprecated\n * UID in form of renderProps (not SSR friendly)\n * @see https://github.com/thearnica/react-uid#react-components\n * @example\n * // get UID to connect label to input\n * <UID>\n *   {(id)} => <label htmlFor={id}><input id={id}/>}\n * </UID>\n *\n * // get uid to generate uid for a keys in a list\n * <UID>\n *   {(, uid)} => items.map(item => <li key={uid(item) />)}\n * </UID>\n */\nvar UID = /** @class */ (function (_super) {\n    __extends(UID, _super);\n    function UID() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            quartz: _this.props.idSource || counter,\n            prefix: getPrefix(_this.props.idSource),\n            id: getId(_this.props.idSource || counter)\n        };\n        _this.uid = function (item) { return prefixId(_this.state.id + '-' + _this.state.quartz.uid(item), _this.state.prefix, _this.props.name); };\n        return _this;\n    }\n    UID.prototype.render = function () {\n        var _a = this.props, children = _a.children, name = _a.name;\n        var _b = this.state, id = _b.id, prefix = _b.prefix;\n        return children(prefixId(id, prefix, name), this.uid);\n    };\n    return UID;\n}(React.Component));\nexport { UID };\n"]},"metadata":{},"sourceType":"module"}