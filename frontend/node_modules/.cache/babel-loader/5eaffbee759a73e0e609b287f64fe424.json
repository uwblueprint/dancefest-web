{"ast":null,"code":"import { useCallback } from 'react';\nimport { useAnalyticsEvents } from './useAnalyticsEvents';\nimport { useTrackedRef } from './useTrackedRef';\nexport var useCallbackWithAnalytics = function useCallbackWithAnalytics(method, payload, channel) {\n  var _useAnalyticsEvents = useAnalyticsEvents(),\n      createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;\n\n  var methodRef = useTrackedRef(method);\n  var payloadRef = useTrackedRef(payload);\n  return useCallback(function () {\n    var pload = typeof payloadRef.current === 'function' ? payloadRef.current.apply(payloadRef, arguments) : payloadRef.current;\n    createAnalyticsEvent(pload).fire(channel);\n    methodRef.current.apply(methodRef, arguments);\n  }, [createAnalyticsEvent, methodRef, payloadRef, channel]);\n};","map":{"version":3,"sources":["/Users/oustan/Documents/PROJECTS/dancefest-web/frontend/node_modules/@atlaskit/analytics-next/dist/esm/hooks/useCallbackWithAnalytics.js"],"names":["useCallback","useAnalyticsEvents","useTrackedRef","useCallbackWithAnalytics","method","payload","channel","_useAnalyticsEvents","createAnalyticsEvent","methodRef","payloadRef","pload","current","apply","arguments","fire"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAO,IAAIC,wBAAwB,GAAG,SAASA,wBAAT,CAAkCC,MAAlC,EAA0CC,OAA1C,EAAmDC,OAAnD,EAA4D;AAChG,MAAIC,mBAAmB,GAAGN,kBAAkB,EAA5C;AAAA,MACIO,oBAAoB,GAAGD,mBAAmB,CAACC,oBAD/C;;AAGA,MAAIC,SAAS,GAAGP,aAAa,CAACE,MAAD,CAA7B;AACA,MAAIM,UAAU,GAAGR,aAAa,CAACG,OAAD,CAA9B;AACA,SAAOL,WAAW,CAAC,YAAY;AAC7B,QAAIW,KAAK,GAAG,OAAOD,UAAU,CAACE,OAAlB,KAA8B,UAA9B,GAA2CF,UAAU,CAACE,OAAX,CAAmBC,KAAnB,CAAyBH,UAAzB,EAAqCI,SAArC,CAA3C,GAA6FJ,UAAU,CAACE,OAApH;AACAJ,IAAAA,oBAAoB,CAACG,KAAD,CAApB,CAA4BI,IAA5B,CAAiCT,OAAjC;AACAG,IAAAA,SAAS,CAACG,OAAV,CAAkBC,KAAlB,CAAwBJ,SAAxB,EAAmCK,SAAnC;AACD,GAJiB,EAIf,CAACN,oBAAD,EAAuBC,SAAvB,EAAkCC,UAAlC,EAA8CJ,OAA9C,CAJe,CAAlB;AAKD,CAXM","sourcesContent":["import { useCallback } from 'react';\nimport { useAnalyticsEvents } from './useAnalyticsEvents';\nimport { useTrackedRef } from './useTrackedRef';\nexport var useCallbackWithAnalytics = function useCallbackWithAnalytics(method, payload, channel) {\n  var _useAnalyticsEvents = useAnalyticsEvents(),\n      createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;\n\n  var methodRef = useTrackedRef(method);\n  var payloadRef = useTrackedRef(payload);\n  return useCallback(function () {\n    var pload = typeof payloadRef.current === 'function' ? payloadRef.current.apply(payloadRef, arguments) : payloadRef.current;\n    createAnalyticsEvent(pload).fire(channel);\n    methodRef.current.apply(methodRef, arguments);\n  }, [createAnalyticsEvent, methodRef, payloadRef, channel]);\n};"]},"metadata":{},"sourceType":"module"}