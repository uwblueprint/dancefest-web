{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { createContext, useContext, useCallback } from 'react';\n/*\ncreateTheme is used to create a set of Providers and Consumers for theming components.\n- Takes a default theme function; this theme function gets a set of props, and returns tokens\n   based on those props. An example of this default theme function is one that produces the standard\n   appearance of the component\n- Returns two things - a Provider that allow for additional themes to be applied, and a Consumer\n   that can get the current theme and fetch it.\n*/\n\nexport function createTheme(defaultGetTokens) {\n  var emptyThemeFn = function emptyThemeFn(getTokens, props) {\n    return getTokens(props);\n  };\n  /* Internally, Theme uses React Context, with internal providers and consumers.\n     The React Context passes only a function that gets props, and turns them into tokens. This\n        function gets mixed as more Providers with their own themes are added. This mixed function\n        is ultimately picked up by Consumers, which implement a context consumer internally to fetch\n        the theme. */\n\n\n  var ThemeContext = /*#__PURE__*/createContext(defaultGetTokens); // The Theme Consumer takes a function as its child - this function takes tokens, and the\n  // return value is generally a set of nodes with the tokens applied appropriately.\n\n  function Consumer(props) {\n    var children = props.children,\n        themeProps = _objectWithoutProperties(props, [\"children\"]);\n\n    var theme = useContext(ThemeContext);\n    var themeFn = theme || emptyThemeFn; // @ts-ignore See issue for more info: https://github.com/Microsoft/TypeScript/issues/10727\n    // Argument of type 'Pick<ThemeProps & { children: (tokens: ThemeTokens) => ReactNode; }, Exclude<keyof ThemeProps, \"children\">>' is not assignable to parameter of type 'ThemeProps'.ts(2345)\n\n    var tokens = themeFn(themeProps); // We add a fragment to ensure we don't break people upgrading.\n    // Previously they may have been able to pass in undefined without things blowing up.\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, children(tokens));\n  }\n  /* The Theme Provider takes regular nodes as its child, but also takes a *theme function*\n     - The theme function takes a set of props, as well as a function (getTokens) that can\n        turn props into tokens.\n     - The getTokens function isn't called immediately - instead the props are passed\n        through a mix of parent theming functions\n     Children of this provider will receive this mixed theme\n  */\n\n\n  function Provider(props) {\n    var themeFn = useContext(ThemeContext);\n    var valueFn = props.value || emptyThemeFn;\n    var mixedFn = useCallback(function (themeProps) {\n      return valueFn(themeFn, themeProps);\n    }, [themeFn, valueFn]);\n    return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n      value: mixedFn\n    }, props.children);\n  }\n\n  return {\n    Consumer: Consumer,\n    Provider: Provider\n  };\n}","map":{"version":3,"sources":["/Users/oustan/Documents/PROJECTS/dancefest-web/frontend/node_modules/@atlaskit/theme/dist/esm/utils/createTheme.js"],"names":["_objectWithoutProperties","React","createContext","useContext","useCallback","createTheme","defaultGetTokens","emptyThemeFn","getTokens","props","ThemeContext","Consumer","children","themeProps","theme","themeFn","tokens","createElement","Fragment","Provider","valueFn","value","mixedFn"],"mappings":"AAAA,OAAOA,wBAAP,MAAqC,gDAArC;AACA,OAAOC,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,WAA3C,QAA8D,OAA9D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,gBAArB,EAAuC;AAC5C,MAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,SAAtB,EAAiCC,KAAjC,EAAwC;AACzD,WAAOD,SAAS,CAACC,KAAD,CAAhB;AACD,GAFD;AAGA;AACF;AACA;AACA;AACA;;;AAGE,MAAIC,YAAY,GAAG,aAAaR,aAAa,CAACI,gBAAD,CAA7C,CAX4C,CAWqB;AACjE;;AAEA,WAASK,QAAT,CAAkBF,KAAlB,EAAyB;AACvB,QAAIG,QAAQ,GAAGH,KAAK,CAACG,QAArB;AAAA,QACIC,UAAU,GAAGb,wBAAwB,CAACS,KAAD,EAAQ,CAAC,UAAD,CAAR,CADzC;;AAGA,QAAIK,KAAK,GAAGX,UAAU,CAACO,YAAD,CAAtB;AACA,QAAIK,OAAO,GAAGD,KAAK,IAAIP,YAAvB,CALuB,CAKc;AACrC;;AAEA,QAAIS,MAAM,GAAGD,OAAO,CAACF,UAAD,CAApB,CARuB,CAQW;AAClC;;AAEA,WAAO,aAAaZ,KAAK,CAACgB,aAAN,CAAoBhB,KAAK,CAACiB,QAA1B,EAAoC,IAApC,EAA0CN,QAAQ,CAACI,MAAD,CAAlD,CAApB;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGE,WAASG,QAAT,CAAkBV,KAAlB,EAAyB;AACvB,QAAIM,OAAO,GAAGZ,UAAU,CAACO,YAAD,CAAxB;AACA,QAAIU,OAAO,GAAGX,KAAK,CAACY,KAAN,IAAed,YAA7B;AACA,QAAIe,OAAO,GAAGlB,WAAW,CAAC,UAAUS,UAAV,EAAsB;AAC9C,aAAOO,OAAO,CAACL,OAAD,EAAUF,UAAV,CAAd;AACD,KAFwB,EAEtB,CAACE,OAAD,EAAUK,OAAV,CAFsB,CAAzB;AAGA,WAAO,aAAanB,KAAK,CAACgB,aAAN,CAAoBP,YAAY,CAACS,QAAjC,EAA2C;AAC7DE,MAAAA,KAAK,EAAEC;AADsD,KAA3C,EAEjBb,KAAK,CAACG,QAFW,CAApB;AAGD;;AAED,SAAO;AACLD,IAAAA,QAAQ,EAAEA,QADL;AAELQ,IAAAA,QAAQ,EAAEA;AAFL,GAAP;AAID","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { createContext, useContext, useCallback } from 'react';\n\n/*\ncreateTheme is used to create a set of Providers and Consumers for theming components.\n- Takes a default theme function; this theme function gets a set of props, and returns tokens\n   based on those props. An example of this default theme function is one that produces the standard\n   appearance of the component\n- Returns two things - a Provider that allow for additional themes to be applied, and a Consumer\n   that can get the current theme and fetch it.\n*/\nexport function createTheme(defaultGetTokens) {\n  var emptyThemeFn = function emptyThemeFn(getTokens, props) {\n    return getTokens(props);\n  };\n  /* Internally, Theme uses React Context, with internal providers and consumers.\n     The React Context passes only a function that gets props, and turns them into tokens. This\n        function gets mixed as more Providers with their own themes are added. This mixed function\n        is ultimately picked up by Consumers, which implement a context consumer internally to fetch\n        the theme. */\n\n\n  var ThemeContext = /*#__PURE__*/createContext(defaultGetTokens); // The Theme Consumer takes a function as its child - this function takes tokens, and the\n  // return value is generally a set of nodes with the tokens applied appropriately.\n\n  function Consumer(props) {\n    var children = props.children,\n        themeProps = _objectWithoutProperties(props, [\"children\"]);\n\n    var theme = useContext(ThemeContext);\n    var themeFn = theme || emptyThemeFn; // @ts-ignore See issue for more info: https://github.com/Microsoft/TypeScript/issues/10727\n    // Argument of type 'Pick<ThemeProps & { children: (tokens: ThemeTokens) => ReactNode; }, Exclude<keyof ThemeProps, \"children\">>' is not assignable to parameter of type 'ThemeProps'.ts(2345)\n\n    var tokens = themeFn(themeProps); // We add a fragment to ensure we don't break people upgrading.\n    // Previously they may have been able to pass in undefined without things blowing up.\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, children(tokens));\n  }\n  /* The Theme Provider takes regular nodes as its child, but also takes a *theme function*\n     - The theme function takes a set of props, as well as a function (getTokens) that can\n        turn props into tokens.\n     - The getTokens function isn't called immediately - instead the props are passed\n        through a mix of parent theming functions\n     Children of this provider will receive this mixed theme\n  */\n\n\n  function Provider(props) {\n    var themeFn = useContext(ThemeContext);\n    var valueFn = props.value || emptyThemeFn;\n    var mixedFn = useCallback(function (themeProps) {\n      return valueFn(themeFn, themeProps);\n    }, [themeFn, valueFn]);\n    return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n      value: mixedFn\n    }, props.children);\n  }\n\n  return {\n    Consumer: Consumer,\n    Provider: Provider\n  };\n}"]},"metadata":{},"sourceType":"module"}