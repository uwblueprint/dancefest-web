{"ast":null,"code":"var _jsxFileName = \"/Users/oustan/Documents/PROJECTS/dancefest-web/frontend/src/components/FilterDropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react'; // React\n\nimport PropTypes from 'prop-types'; // PropTypes\n\nimport Button from 'components/Button'; // Button\n\nimport { ReactComponent as ChevronDown } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/chevron-down.svg\"; // Chevron Down Icon\n\nimport { ReactComponent as Checkmark } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/checkmark.svg\"; // Checkmark Icon\n\nimport styles from 'styles/components/FilterDropdown.module.css'; // Component styles\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FilterDropdown({\n  buttonText,\n  options = {},\n  setOptions\n}) {\n  _s();\n\n  const [open, setOpen] = useState(false);\n\n  const handleButtonClick = () => setOpen(!open);\n\n  const handleCloseOptions = () => setOpen(false);\n\n  const handleClearFilter = () => {\n    const newOptions = {};\n    Object.keys(options).map(option => {\n      newOptions[option] = { ...options[option],\n        selected: false\n      };\n    });\n    setOptions(newOptions);\n  };\n\n  const toggleOption = useCallback(option => () => setOptions(options => ({ ...options,\n    [option]: { ...options[option],\n      selected: !options[option].selected\n    }\n  })), []);\n\n  const Option = ({\n    option\n  }) => {\n    const {\n      [option]: {\n        selected\n      }\n    } = options;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.filterDropdown__option} ${selected && styles.filterDropdown__optionSelected}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: toggleOption(option),\n        children: selected && /*#__PURE__*/_jsxDEV(Checkmark, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 58\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: options[option].label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.filterDropdown__wrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `${styles.filterDropdown__button} ${open && styles.filterDropdown__buttonOpen}`,\n      onClick: handleButtonClick,\n      children: [buttonText, /*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.filterDropdown__button_iconWrapper,\n        children: /*#__PURE__*/_jsxDEV(ChevronDown, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), open && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.filterDropdown__options__container,\n      onBlur: handleCloseOptions,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.filterDropdown__options,\n        children: Object.keys(options).map((option, i) => /*#__PURE__*/_jsxDEV(Option, {\n          option: option\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: styles.filterDropdown__clearFilterButton,\n        variant: \"contained\",\n        onClick: handleClearFilter,\n        children: \"Clear Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FilterDropdown, \"xCavISV/61Dtf8DmXwdZE+rPrhU=\");\n\n_c = FilterDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterDropdown\");","map":{"version":3,"sources":["/Users/oustan/Documents/PROJECTS/dancefest-web/frontend/src/components/FilterDropdown.js"],"names":["React","useState","useCallback","PropTypes","Button","styles","FilterDropdown","buttonText","options","setOptions","open","setOpen","handleButtonClick","handleCloseOptions","handleClearFilter","newOptions","Object","keys","map","option","selected","toggleOption","Option","filterDropdown__option","filterDropdown__optionSelected","label","filterDropdown__wrapper","filterDropdown__button","filterDropdown__buttonOpen","filterDropdown__button_iconWrapper","filterDropdown__options__container","filterDropdown__options","i","filterDropdown__clearFilterButton"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'; // React\nimport PropTypes from 'prop-types'; // PropTypes\n\nimport Button from 'components/Button'; // Button\nimport { ReactComponent as ChevronDown } from 'assets/chevron-down.svg'; // Chevron Down Icon\nimport { ReactComponent as Checkmark } from 'assets/checkmark.svg'; // Checkmark Icon\nimport styles from 'styles/components/FilterDropdown.module.css'; // Component styles\n\nexport default function FilterDropdown({ buttonText, options = {}, setOptions }) {\n  const [open, setOpen] = useState(false);\n\n  const handleButtonClick = () => setOpen(!open);\n\n  const handleCloseOptions = () => setOpen(false);\n\n  const handleClearFilter = () => {\n    const newOptions = {};\n    Object.keys(options).map(option => {\n      newOptions[option] = {\n        ...options[option],\n        selected: false,\n      };\n    });\n    setOptions(newOptions);\n  };\n\n  const toggleOption = useCallback(\n    option => () =>\n      setOptions(options => ({\n        ...options,\n        [option]: {\n          ...options[option],\n          selected: !options[option].selected,\n        },\n      })),\n    []\n  );\n\n  const Option = ({ option }) => {\n    const {\n      [option]: { selected },\n    } = options;\n    return (\n      <div\n        className={`${styles.filterDropdown__option} ${selected &&\n          styles.filterDropdown__optionSelected}`}\n      >\n        <div onClick={toggleOption(option)}>{selected && <Checkmark />}</div>\n        <div>{options[option].label}</div>\n      </div>\n    );\n  };\n\n  return (\n    <div className={styles.filterDropdown__wrapper}>\n      <button\n        className={`${styles.filterDropdown__button} ${open && styles.filterDropdown__buttonOpen}`}\n        onClick={handleButtonClick}\n      >\n        {buttonText}\n        <span className={styles.filterDropdown__button_iconWrapper}>\n          <ChevronDown />\n        </span>\n      </button>\n      {open && (\n        <div className={styles.filterDropdown__options__container} onBlur={handleCloseOptions}>\n          <div className={styles.filterDropdown__options}>\n            {Object.keys(options).map((option, i) => (\n              <Option key={i} option={option} />\n            ))}\n          </div>\n          <Button\n            className={styles.filterDropdown__clearFilterButton}\n            variant=\"contained\"\n            onClick={handleClearFilter}\n          >\n            Clear Filter\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}