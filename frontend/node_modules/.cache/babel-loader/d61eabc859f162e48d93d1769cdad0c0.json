{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IconWrapper = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar react_1 = tslib_1.__importDefault(require(\"react\"));\n\nvar styled_components_1 = tslib_1.__importDefault(require(\"styled-components\"));\n\nvar uuid_1 = tslib_1.__importDefault(require(\"uuid\"));\n\nvar colors_1 = require(\"@atlaskit/theme/colors\");\n\nvar constants_1 = require(\"../constants\");\n\nvar getSize = function (_a) {\n  var size = _a.size;\n  return size ? \"height: \" + constants_1.sizes[size] + \"; width: \" + constants_1.sizes[size] + \";\" : null;\n};\n\nexports.IconWrapper = styled_components_1.default.span(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n  \", \";\\n  color: \", \";\\n  display: inline-block;\\n  fill: \", \";\\n  flex-shrink: 0;\\n  line-height: 1;\\n\\n  > svg {\\n    \", \";\\n    max-height: 100%;\\n    max-width: 100%;\\n    overflow: hidden;\\n    pointer-events: none;\\n    vertical-align: bottom;\\n  }\\n\\n  /**\\n   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.\\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\\n   * rule) and then override it with currentColor for the color changes to be picked up.\\n   */\\n  stop {\\n    stop-color: currentColor;\\n  }\\n\"], [\"\\n  \", \";\\n  color: \", \";\\n  display: inline-block;\\n  fill: \", \";\\n  flex-shrink: 0;\\n  line-height: 1;\\n\\n  > svg {\\n    \", \";\\n    max-height: 100%;\\n    max-width: 100%;\\n    overflow: hidden;\\n    pointer-events: none;\\n    vertical-align: bottom;\\n  }\\n\\n  /**\\n   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.\\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\\n   * rule) and then override it with currentColor for the color changes to be picked up.\\n   */\\n  stop {\\n    stop-color: currentColor;\\n  }\\n\"])), getSize, function (p) {\n  return p.primaryColor || 'currentColor';\n}, function (p) {\n  return p.secondaryColor || colors_1.background;\n}, getSize);\n/**\n * Icons need unique gradient IDs across instances for different gradient definitions to work\n * correctly.\n * A step in the icon build process replaces linear gradient IDs and their references in paths\n * to a placeholder string so we can replace them with a dynamic ID here.\n * Replacing the original IDs with placeholders in the build process is more robust than not\n * using placeholders as we do not have to rely on regular expressions to find specific element\n * to replace.\n */\n\nfunction insertDynamicGradientID(svgStr, label) {\n  var id = uuid_1.default();\n  var replacedSvgStr = svgStr.replace(/id=\"([^\"]+)-idPlaceholder\"/g, \"id=$1-\" + id).replace(/fill=\"url\\(#([^\"]+)-idPlaceholder\\)\"/g, \"fill=\\\"url(#$1-\" + id + \")\\\"\");\n  return replacedSvgStr;\n}\n\nvar Icon = function (props) {\n  var Glyph = props.glyph,\n      dangerouslySetGlyph = props.dangerouslySetGlyph,\n      primaryColor = props.primaryColor,\n      secondaryColor = props.secondaryColor,\n      size = props.size,\n      testId = props.testId,\n      label = props.label;\n  var glyphProps = dangerouslySetGlyph ? {\n    dangerouslySetInnerHTML: {\n      __html: insertDynamicGradientID(dangerouslySetGlyph, label)\n    }\n  } : {\n    children: Glyph ? react_1.default.createElement(Glyph, {\n      role: \"presentation\"\n    }) : null\n  };\n  return react_1.default.createElement(exports.IconWrapper, tslib_1.__assign({\n    primaryColor: primaryColor,\n    secondaryColor: secondaryColor,\n    size: size,\n    \"data-testid\": testId,\n    role: label ? 'img' : 'presentation',\n    \"aria-label\": label ? label : undefined\n  }, glyphProps));\n};\n\nexports.default = Icon;\nvar templateObject_1;","map":{"version":3,"sources":["../../src/components/Icon.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IconWrapper = void 0;\nvar tslib_1 = require(\"tslib\");\nvar react_1 = tslib_1.__importDefault(require(\"react\"));\nvar styled_components_1 = tslib_1.__importDefault(require(\"styled-components\"));\nvar uuid_1 = tslib_1.__importDefault(require(\"uuid\"));\nvar colors_1 = require(\"@atlaskit/theme/colors\");\nvar constants_1 = require(\"../constants\");\nvar getSize = function (_a) {\n    var size = _a.size;\n    return size ? \"height: \" + constants_1.sizes[size] + \"; width: \" + constants_1.sizes[size] + \";\" : null;\n};\nexports.IconWrapper = styled_components_1.default.span(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n  \", \";\\n  color: \", \";\\n  display: inline-block;\\n  fill: \", \";\\n  flex-shrink: 0;\\n  line-height: 1;\\n\\n  > svg {\\n    \", \";\\n    max-height: 100%;\\n    max-width: 100%;\\n    overflow: hidden;\\n    pointer-events: none;\\n    vertical-align: bottom;\\n  }\\n\\n  /**\\n   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.\\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\\n   * rule) and then override it with currentColor for the color changes to be picked up.\\n   */\\n  stop {\\n    stop-color: currentColor;\\n  }\\n\"], [\"\\n  \", \";\\n  color: \", \";\\n  display: inline-block;\\n  fill: \", \";\\n  flex-shrink: 0;\\n  line-height: 1;\\n\\n  > svg {\\n    \", \";\\n    max-height: 100%;\\n    max-width: 100%;\\n    overflow: hidden;\\n    pointer-events: none;\\n    vertical-align: bottom;\\n  }\\n\\n  /**\\n   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.\\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\\n   * rule) and then override it with currentColor for the color changes to be picked up.\\n   */\\n  stop {\\n    stop-color: currentColor;\\n  }\\n\"])), getSize, function (p) { return p.primaryColor || 'currentColor'; }, function (p) { return p.secondaryColor || colors_1.background; }, getSize);\n/**\n * Icons need unique gradient IDs across instances for different gradient definitions to work\n * correctly.\n * A step in the icon build process replaces linear gradient IDs and their references in paths\n * to a placeholder string so we can replace them with a dynamic ID here.\n * Replacing the original IDs with placeholders in the build process is more robust than not\n * using placeholders as we do not have to rely on regular expressions to find specific element\n * to replace.\n */\nfunction insertDynamicGradientID(svgStr, label) {\n    var id = uuid_1.default();\n    var replacedSvgStr = svgStr\n        .replace(/id=\"([^\"]+)-idPlaceholder\"/g, \"id=$1-\" + id)\n        .replace(/fill=\"url\\(#([^\"]+)-idPlaceholder\\)\"/g, \"fill=\\\"url(#$1-\" + id + \")\\\"\");\n    return replacedSvgStr;\n}\nvar Icon = function (props) {\n    var Glyph = props.glyph, dangerouslySetGlyph = props.dangerouslySetGlyph, primaryColor = props.primaryColor, secondaryColor = props.secondaryColor, size = props.size, testId = props.testId, label = props.label;\n    var glyphProps = dangerouslySetGlyph\n        ? {\n            dangerouslySetInnerHTML: {\n                __html: insertDynamicGradientID(dangerouslySetGlyph, label),\n            },\n        }\n        : { children: Glyph ? react_1.default.createElement(Glyph, { role: \"presentation\" }) : null };\n    return (react_1.default.createElement(exports.IconWrapper, tslib_1.__assign({ primaryColor: primaryColor, secondaryColor: secondaryColor, size: size, \"data-testid\": testId, role: label ? 'img' : 'presentation', \"aria-label\": label ? label : undefined }, glyphProps)));\n};\nexports.default = Icon;\nvar templateObject_1;\n//# sourceMappingURL=Icon.js.map"]},"metadata":{},"sourceType":"script"}