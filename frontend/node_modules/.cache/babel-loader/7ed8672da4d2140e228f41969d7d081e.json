{"ast":null,"code":"/* eslint-disable prefer-rest-params */\nimport getTheme from './getTheme'; // Unpack custom variants, and get correct value for the current theme\n\nfunction themedVariants(variantProp, variants) {\n  return function (props) {\n    var theme = getTheme(props);\n\n    if (props && props[variantProp] && variants) {\n      var modes = variants[props[variantProp]];\n\n      if (modes && modes[theme.mode]) {\n        var value = modes[theme.mode];\n\n        if (value) {\n          return value;\n        } // TS believes value can be undefined\n\n      }\n    }\n\n    return '';\n  };\n}\n\nexport default function themed(modesOrVariant, variantModes) {\n  if (typeof modesOrVariant === 'string') {\n    return themedVariants(modesOrVariant, variantModes);\n  }\n\n  var modes = modesOrVariant;\n  return function (props) {\n    // Get theme from the user's props\n    var theme = getTheme(props); // User isn't required to provide both light and dark values\n\n    if (theme.mode in modes) {\n      var value = modes[theme.mode]; // TS believes value can be undefined\n\n      if (value) {\n        return value;\n      }\n    }\n\n    return '';\n  };\n}","map":{"version":3,"sources":["/Users/oustan/Documents/PROJECTS/dancefest-web/frontend/node_modules/@atlaskit/theme/dist/esm/utils/themed.js"],"names":["getTheme","themedVariants","variantProp","variants","props","theme","modes","mode","value","themed","modesOrVariant","variantModes"],"mappings":"AAAA;AACA,OAAOA,QAAP,MAAqB,YAArB,C,CAEA;;AACA,SAASC,cAAT,CAAwBC,WAAxB,EAAqCC,QAArC,EAA+C;AAC7C,SAAO,UAAUC,KAAV,EAAiB;AACtB,QAAIC,KAAK,GAAGL,QAAQ,CAACI,KAAD,CAApB;;AAEA,QAAIA,KAAK,IAAIA,KAAK,CAACF,WAAD,CAAd,IAA+BC,QAAnC,EAA6C;AAC3C,UAAIG,KAAK,GAAGH,QAAQ,CAACC,KAAK,CAACF,WAAD,CAAN,CAApB;;AAEA,UAAII,KAAK,IAAIA,KAAK,CAACD,KAAK,CAACE,IAAP,CAAlB,EAAgC;AAC9B,YAAIC,KAAK,GAAGF,KAAK,CAACD,KAAK,CAACE,IAAP,CAAjB;;AAEA,YAAIC,KAAJ,EAAW;AACT,iBAAOA,KAAP;AACD,SAL6B,CAK5B;;AAEH;AACF;;AAED,WAAO,EAAP;AACD,GAjBD;AAkBD;;AAED,eAAe,SAASC,MAAT,CAAgBC,cAAhB,EAAgCC,YAAhC,EAA8C;AAC3D,MAAI,OAAOD,cAAP,KAA0B,QAA9B,EAAwC;AACtC,WAAOT,cAAc,CAACS,cAAD,EAAiBC,YAAjB,CAArB;AACD;;AAED,MAAIL,KAAK,GAAGI,cAAZ;AACA,SAAO,UAAUN,KAAV,EAAiB;AACtB;AACA,QAAIC,KAAK,GAAGL,QAAQ,CAACI,KAAD,CAApB,CAFsB,CAEO;;AAE7B,QAAIC,KAAK,CAACE,IAAN,IAAcD,KAAlB,EAAyB;AACvB,UAAIE,KAAK,GAAGF,KAAK,CAACD,KAAK,CAACE,IAAP,CAAjB,CADuB,CACQ;;AAE/B,UAAIC,KAAJ,EAAW;AACT,eAAOA,KAAP;AACD;AACF;;AAED,WAAO,EAAP;AACD,GAbD;AAcD","sourcesContent":["/* eslint-disable prefer-rest-params */\nimport getTheme from './getTheme';\n\n// Unpack custom variants, and get correct value for the current theme\nfunction themedVariants(variantProp, variants) {\n  return function (props) {\n    var theme = getTheme(props);\n\n    if (props && props[variantProp] && variants) {\n      var modes = variants[props[variantProp]];\n\n      if (modes && modes[theme.mode]) {\n        var value = modes[theme.mode];\n\n        if (value) {\n          return value;\n        } // TS believes value can be undefined\n\n      }\n    }\n\n    return '';\n  };\n}\n\nexport default function themed(modesOrVariant, variantModes) {\n  if (typeof modesOrVariant === 'string') {\n    return themedVariants(modesOrVariant, variantModes);\n  }\n\n  var modes = modesOrVariant;\n  return function (props) {\n    // Get theme from the user's props\n    var theme = getTheme(props); // User isn't required to provide both light and dark values\n\n    if (theme.mode in modes) {\n      var value = modes[theme.mode]; // TS believes value can be undefined\n\n      if (value) {\n        return value;\n      }\n    }\n\n    return '';\n  };\n}"]},"metadata":{},"sourceType":"module"}