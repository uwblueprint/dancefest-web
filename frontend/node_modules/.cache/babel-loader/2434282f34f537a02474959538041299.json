{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React, { useCallback, useMemo } from 'react';\nimport { default as AnalyticsReactContext } from '@atlaskit/analytics-next-stable-react-context';\nimport { useAnalyticsContext } from '../../hooks/useAnalyticsContext';\nimport { useTrackedRef } from '../../hooks/useTrackedRef';\n\nvar AnalyticsListener = function AnalyticsListener(_ref) {\n  var children = _ref.children,\n      channel = _ref.channel,\n      onEvent = _ref.onEvent;\n  var analyticsContext = useAnalyticsContext();\n  var onEventRef = useTrackedRef(onEvent);\n  var channelRef = useTrackedRef(channel);\n  var getAtlaskitAnalyticsEventHandlers = useCallback(function () {\n    var thisHandler = function thisHandler(event, eventChannel) {\n      if (channelRef.current === '*' || channelRef.current === eventChannel) {\n        onEventRef.current(event, eventChannel);\n      }\n    };\n\n    return [].concat(_toConsumableArray(analyticsContext.getAtlaskitAnalyticsEventHandlers()), [thisHandler]);\n  }, [analyticsContext, channelRef, onEventRef]);\n  var value = useMemo(function () {\n    return {\n      getAtlaskitAnalyticsEventHandlers: getAtlaskitAnalyticsEventHandlers,\n      getAtlaskitAnalyticsContext: analyticsContext.getAtlaskitAnalyticsContext\n    };\n  }, [analyticsContext, getAtlaskitAnalyticsEventHandlers]);\n  return /*#__PURE__*/React.createElement(AnalyticsReactContext.Provider, {\n    value: value\n  }, children);\n};\n\nexport default AnalyticsListener;","map":{"version":3,"sources":["/Users/oustan/Documents/PROJECTS/dancefest-web/frontend/node_modules/@atlaskit/analytics-next/dist/esm/components/AnalyticsListener/ModernAnalyticsListener.js"],"names":["_toConsumableArray","React","useCallback","useMemo","default","AnalyticsReactContext","useAnalyticsContext","useTrackedRef","AnalyticsListener","_ref","children","channel","onEvent","analyticsContext","onEventRef","channelRef","getAtlaskitAnalyticsEventHandlers","thisHandler","event","eventChannel","current","concat","value","getAtlaskitAnalyticsContext","createElement","Provider"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,0CAA/B;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,SAASC,OAAO,IAAIC,qBAApB,QAAiD,+CAAjD;AACA,SAASC,mBAAT,QAAoC,iCAApC;AACA,SAASC,aAAT,QAA8B,2BAA9B;;AAEA,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,IAA3B,EAAiC;AACvD,MAAIC,QAAQ,GAAGD,IAAI,CAACC,QAApB;AAAA,MACIC,OAAO,GAAGF,IAAI,CAACE,OADnB;AAAA,MAEIC,OAAO,GAAGH,IAAI,CAACG,OAFnB;AAGA,MAAIC,gBAAgB,GAAGP,mBAAmB,EAA1C;AACA,MAAIQ,UAAU,GAAGP,aAAa,CAACK,OAAD,CAA9B;AACA,MAAIG,UAAU,GAAGR,aAAa,CAACI,OAAD,CAA9B;AACA,MAAIK,iCAAiC,GAAGd,WAAW,CAAC,YAAY;AAC9D,QAAIe,WAAW,GAAG,SAASA,WAAT,CAAqBC,KAArB,EAA4BC,YAA5B,EAA0C;AAC1D,UAAIJ,UAAU,CAACK,OAAX,KAAuB,GAAvB,IAA8BL,UAAU,CAACK,OAAX,KAAuBD,YAAzD,EAAuE;AACrEL,QAAAA,UAAU,CAACM,OAAX,CAAmBF,KAAnB,EAA0BC,YAA1B;AACD;AACF,KAJD;;AAMA,WAAO,GAAGE,MAAH,CAAUrB,kBAAkB,CAACa,gBAAgB,CAACG,iCAAjB,EAAD,CAA5B,EAAoF,CAACC,WAAD,CAApF,CAAP;AACD,GARkD,EAQhD,CAACJ,gBAAD,EAAmBE,UAAnB,EAA+BD,UAA/B,CARgD,CAAnD;AASA,MAAIQ,KAAK,GAAGnB,OAAO,CAAC,YAAY;AAC9B,WAAO;AACLa,MAAAA,iCAAiC,EAAEA,iCAD9B;AAELO,MAAAA,2BAA2B,EAAEV,gBAAgB,CAACU;AAFzC,KAAP;AAID,GALkB,EAKhB,CAACV,gBAAD,EAAmBG,iCAAnB,CALgB,CAAnB;AAMA,SAAO,aAAaf,KAAK,CAACuB,aAAN,CAAoBnB,qBAAqB,CAACoB,QAA1C,EAAoD;AACtEH,IAAAA,KAAK,EAAEA;AAD+D,GAApD,EAEjBZ,QAFiB,CAApB;AAGD,CAzBD;;AA2BA,eAAeF,iBAAf","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React, { useCallback, useMemo } from 'react';\nimport { default as AnalyticsReactContext } from '@atlaskit/analytics-next-stable-react-context';\nimport { useAnalyticsContext } from '../../hooks/useAnalyticsContext';\nimport { useTrackedRef } from '../../hooks/useTrackedRef';\n\nvar AnalyticsListener = function AnalyticsListener(_ref) {\n  var children = _ref.children,\n      channel = _ref.channel,\n      onEvent = _ref.onEvent;\n  var analyticsContext = useAnalyticsContext();\n  var onEventRef = useTrackedRef(onEvent);\n  var channelRef = useTrackedRef(channel);\n  var getAtlaskitAnalyticsEventHandlers = useCallback(function () {\n    var thisHandler = function thisHandler(event, eventChannel) {\n      if (channelRef.current === '*' || channelRef.current === eventChannel) {\n        onEventRef.current(event, eventChannel);\n      }\n    };\n\n    return [].concat(_toConsumableArray(analyticsContext.getAtlaskitAnalyticsEventHandlers()), [thisHandler]);\n  }, [analyticsContext, channelRef, onEventRef]);\n  var value = useMemo(function () {\n    return {\n      getAtlaskitAnalyticsEventHandlers: getAtlaskitAnalyticsEventHandlers,\n      getAtlaskitAnalyticsContext: analyticsContext.getAtlaskitAnalyticsContext\n    };\n  }, [analyticsContext, getAtlaskitAnalyticsEventHandlers]);\n  return /*#__PURE__*/React.createElement(AnalyticsReactContext.Provider, {\n    value: value\n  }, children);\n};\n\nexport default AnalyticsListener;"]},"metadata":{},"sourceType":"module"}