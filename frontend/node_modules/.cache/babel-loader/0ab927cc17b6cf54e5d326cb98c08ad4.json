{"ast":null,"code":"import * as React from \"react\";\nimport { counter, getId, getPrefix, source } from \"./context\";\n\nvar generateUID = function (context) {\n  var quartz = context || counter;\n  var prefix = getPrefix(quartz);\n  var id = getId(quartz);\n  var uid = prefix + id;\n\n  var gen = function (item) {\n    return uid + quartz.uid(item);\n  };\n\n  return {\n    uid: uid,\n    gen: gen\n  };\n};\n\nvar useUIDState = function () {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!('useContext' in React)) {\n      throw new Error('Hooks API requires React 16.8+');\n    }\n  } // @ts-ignore\n\n\n  return React.useState(generateUID(React.useContext(source)));\n};\n/**\n * returns and unique id. SSR friendly\n * returns {String}\n * @see {@link UIDConsumer}\n * @see https://github.com/thearnica/react-uid#hooks-168\n * @example\n * const id = useUID();\n * id == 1; // for example\n */\n\n\nexport var useUID = function () {\n  var uid = useUIDState()[0].uid;\n  return uid;\n};\n/**\n * returns an uid generator\n * @see {@link UIDConsumer}\n * @see https://github.com/thearnica/react-uid#hooks-168\n * @example\n * const uid = useUIDSeed();\n * return (\n *  <>\n *    <label for={seed('email')}>Email: </label>\n *    <input id={seed('email')} name=\"email\" />\n *    {data.map(item => <div key={seed(item)}>...</div>\n *  </>\n * )\n */\n\nexport var useUIDSeed = function () {\n  var gen = useUIDState()[0].gen;\n  return gen;\n};","map":{"version":3,"sources":["/Users/oustan/Documents/PROJECTS/dancefest-web/frontend/node_modules/react-uid/dist/es2015/hooks.js"],"names":["React","counter","getId","getPrefix","source","generateUID","context","quartz","prefix","id","uid","gen","item","useUIDState","process","env","NODE_ENV","Error","useState","useContext","useUID","useUIDSeed"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,EAAkBC,KAAlB,EAAyBC,SAAzB,EAAoCC,MAApC,QAAkD,WAAlD;;AACA,IAAIC,WAAW,GAAG,UAAUC,OAAV,EAAmB;AACjC,MAAIC,MAAM,GAAGD,OAAO,IAAIL,OAAxB;AACA,MAAIO,MAAM,GAAGL,SAAS,CAACI,MAAD,CAAtB;AACA,MAAIE,EAAE,GAAGP,KAAK,CAACK,MAAD,CAAd;AACA,MAAIG,GAAG,GAAGF,MAAM,GAAGC,EAAnB;;AACA,MAAIE,GAAG,GAAG,UAAUC,IAAV,EAAgB;AAAE,WAAOF,GAAG,GAAGH,MAAM,CAACG,GAAP,CAAWE,IAAX,CAAb;AAAgC,GAA5D;;AACA,SAAO;AAAEF,IAAAA,GAAG,EAAEA,GAAP;AAAYC,IAAAA,GAAG,EAAEA;AAAjB,GAAP;AACH,CAPD;;AAQA,IAAIE,WAAW,GAAG,YAAY;AAC1B,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvC,QAAI,EAAE,gBAAgBhB,KAAlB,CAAJ,EAA8B;AAC1B,YAAM,IAAIiB,KAAJ,CAAU,gCAAV,CAAN;AACH;AACJ,GALyB,CAM1B;;;AACA,SAAOjB,KAAK,CAACkB,QAAN,CAAeb,WAAW,CAACL,KAAK,CAACmB,UAAN,CAAiBf,MAAjB,CAAD,CAA1B,CAAP;AACH,CARD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIgB,MAAM,GAAG,YAAY;AAC5B,MAAIV,GAAG,GAAGG,WAAW,GAAG,CAAH,CAAX,CAAiBH,GAA3B;AACA,SAAOA,GAAP;AACH,CAHM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIW,UAAU,GAAG,YAAY;AAChC,MAAIV,GAAG,GAAGE,WAAW,GAAG,CAAH,CAAX,CAAiBF,GAA3B;AACA,SAAOA,GAAP;AACH,CAHM","sourcesContent":["import * as React from \"react\";\nimport { counter, getId, getPrefix, source } from \"./context\";\nvar generateUID = function (context) {\n    var quartz = context || counter;\n    var prefix = getPrefix(quartz);\n    var id = getId(quartz);\n    var uid = prefix + id;\n    var gen = function (item) { return uid + quartz.uid(item); };\n    return { uid: uid, gen: gen };\n};\nvar useUIDState = function () {\n    if (process.env.NODE_ENV !== \"production\") {\n        if (!('useContext' in React)) {\n            throw new Error('Hooks API requires React 16.8+');\n        }\n    }\n    // @ts-ignore\n    return React.useState(generateUID(React.useContext(source)));\n};\n/**\n * returns and unique id. SSR friendly\n * returns {String}\n * @see {@link UIDConsumer}\n * @see https://github.com/thearnica/react-uid#hooks-168\n * @example\n * const id = useUID();\n * id == 1; // for example\n */\nexport var useUID = function () {\n    var uid = useUIDState()[0].uid;\n    return uid;\n};\n/**\n * returns an uid generator\n * @see {@link UIDConsumer}\n * @see https://github.com/thearnica/react-uid#hooks-168\n * @example\n * const uid = useUIDSeed();\n * return (\n *  <>\n *    <label for={seed('email')}>Email: </label>\n *    <input id={seed('email')} name=\"email\" />\n *    {data.map(item => <div key={seed(item)}>...</div>\n *  </>\n * )\n */\nexport var useUIDSeed = function () {\n    var gen = useUIDState()[0].gen;\n    return gen;\n};\n"]},"metadata":{},"sourceType":"module"}